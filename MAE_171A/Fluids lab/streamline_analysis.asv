clc;
close all;
clear;

%% Opening images
opn = imread('opn.jpg');

cyl = imread('cyl.jpg');

rankH = imread('rank_H.jpg');

rankF = imread('rank_F.jpg');

%%Flip and reorient **Might not need, double check**

opn = fliplr(flipud(fliplr(flipud(opn))));

cyl = fliplr(flipud(fliplr(flipud(cyl))));

rankH = fliplr(flipud(fliplr(flipud(rankH))));

rankF = fliplr(flipud(fliplr(flipud(rankF))));
%% Crop images to right size, needs to be done individually for each image
%Example
%initial crop around general area
% [h,l] = size(opn)
opn_C1 = imcrop(opn,[1200,600,2300,1000]);
cyl_C1 = imcrop(cyl,[800,80,2100,1500]);
rankH_C1 = imcrop(rankH,[0,400,2100,1100]);
rankF_C1 = imcrop(rankF,[200,500,2300,900]);


%Crop around streamline for binary conversion
opn_C2 = imcrop(opn,[1200,1020,2300,250]);
cyl_C2 = imcrop(cyl,[800,80,2100,200]);
rankH_C2 = imcrop(rankH,[0,1100,2100,400]);
rankF_C2 = imcrop(rankF,[200,500,2300,900]);


%% Open Analysis


ref = [7 45 82];
%dist also looks interesting at 25
dist = 25;

opn_bin = processFunc(opn_C2,ref,dist); % Binary'd the cropped picture

[row_opn,col_opn] = find(opn_bin); %find the binary one whatever it ends up being.

x_opn = 1:length(opn_bin(1,:));
[C_opn,ia_opn,ic_opn] = unique(col_opn);
unqrow_opn = row_opn(ia_opn);
unqcol_opn = col_opn(ia_opn);

s_opn = spline(unqcol_opn, unqrow_opn,x_opn); % fit a spline
s2_opn = s_opn + 490; % compensate for 2nd crop
s_smooth_opn=smooth(s2_opn,100); % smooth the spline

figure(1)
imshow(opn_C1)
hold on
plot(x_opn,s2_opn,'or')
hold on
plot(x_opn,s_smooth_opn,'.b')


%repeat for other ones. 
%% Cylinder Analysis
%check if the crop is good

ref = [7 30 180];
%dist also looks interesting at 25
dist = 85;

[centers,radii] = imfindcircles(cyl_C1,[300 600],'Sensitivity',0.991,'ObjectPolarity','dark');

cyl_bin = processFunc(cyl_C2,ref,dist);

[row_cyl,col_cyl] = find(cyl_bin); %find the binary one whatever it ends up being.

x_cyl = 1:length(cyl_bin(1,:));
[C_cyl,ia_cyl,ic_cyl] = unique(col_cyl);
unqrow_cyl = row_cyl(ia_cyl);
unqcol_cyl = col_cyl(ia_cyl);

s_cyl = spline(unqcol_cyl, unqrow_cyl,x_cyl); % fit a spline
s2_cyl = s_cyl +0; % compensate for 2nd crop
s_smooth_cyl=smooth(s2_cyl,100); % smooth the spline



figure(2)
imshow(cyl_C1)
hold on
viscircles(centers,radii);
plot(centers(1),centers(2),'xr','MarkerSize',20,'LineWidth',3);
hold on
plot(x_cyl,s2_cyl,'or')
hold on
plot(x_cyl,s_smooth_cyl,'.b')

figure(3)
imshow(cyl_bin)
hold on
plot(x_cyl,s_cyl,'or')




%% Rankine Half Analysis

rref = [7 45 82];
%dist also looks interesting at 25
dist = 110;


rankH_bin = processFunc(rankH_C2,ref,dist);

[row_rankH,col_rankH] = find(rankH_bin); %find the binary one whatever it ends up being.

x_rankH = 1:length(rankH_bin(1,:));
[C_rankH,ia_rankH,ic_rankH] = unique(col_rankH);
unqrow_rankH = row_rankH(ia_rankH);
unqcol_rankH = col_rankH(ia_rankH);

s_rankH = spline(unqcol_rankH, unqrow_rankH,x_rankH); % fit a spline
s2_rankH = s_rankH + 700; % compensate for 2nd crop
s_smooth_rankH=smooth(s2_rankH,100); % smooth the spldine

figure(6)
imshow(rankH_C1)
hold on
plot(x_rankH,s2_rankH,'or')
hold on
plot(x_rankH,s_smooth_rankH,'.b')

%% Rankine Full Analysis
rref = [7 45 82];
%dist also looks interesting at 25
dist = 110;

rankF_bin = processFunc(rankH_C2,ref,dist);

% image Checking
% figure(5)
% imshow(rankH_C2)
% figure(6)
% imshow(rankH_bin);




%% Image processing Function
function [mat] = processFunc(img,ref,dist)

tempVec = [0 0 0];
tempMat = zeros(size(img,1),size(img,2)); 
for i = 1:size(img,1) 
    for j = 1:size(img,2)
        tempVec(1)=img(i,j,1);
        tempVec(2)=img(i,j,2);
        tempVec(3)=img(i,j,3);
        if norm(tempVec-ref) < dist
            % check if the color is within color distance
            tempMat(i,j)=1; % if so, set to 1
        end
    end
end
mat = tempMat;

end
